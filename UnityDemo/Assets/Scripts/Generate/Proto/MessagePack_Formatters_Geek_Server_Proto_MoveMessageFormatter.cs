// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.Geek.Server.Proto
{
    public sealed class MoveMessageFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Geek.Server.Proto.MoveMessage>
    {
        // X
        private static global::System.ReadOnlySpan<byte> GetSpan_X() => new byte[1 + 1] { 161, 88 };
        // Y
        private static global::System.ReadOnlySpan<byte> GetSpan_Y() => new byte[1 + 1] { 161, 89 };
        // UserID
        private static global::System.ReadOnlySpan<byte> GetSpan_UserID() => new byte[1 + 6] { 166, 85, 115, 101, 114, 73, 68 };
        // places
        private static global::System.ReadOnlySpan<byte> GetSpan_places() => new byte[1 + 6] { 166, 112, 108, 97, 99, 101, 115 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Geek.Server.Proto.MoveMessage value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(4);
            writer.WriteRaw(GetSpan_X());
            writer.Write(value.X);
            writer.WriteRaw(GetSpan_Y());
            writer.Write(value.Y);
            writer.WriteRaw(GetSpan_UserID());
            writer.Write(value.UserID);
            writer.WriteRaw(GetSpan_places());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Geek.Server.Proto.Place>>(formatterResolver).Serialize(ref writer, value.places, options);
        }

        public global::Geek.Server.Proto.MoveMessage Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::Geek.Server.Proto.MoveMessage();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 1:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 88UL:
                                ____result.X = reader.ReadDouble();
                                continue;
                            case 89UL:
                                ____result.Y = reader.ReadDouble();
                                continue;
                        }
                    case 6:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 75082242552661UL:
                                ____result.UserID = reader.ReadInt64();
                                continue;
                            case 126879296220272UL:
                                ____result.places = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Geek.Server.Proto.Place>>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                        }

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name
